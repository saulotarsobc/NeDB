"use strict";

var _ = require('lodash');

var selectFields = require('../utils/select-fields');

module.exports = function (req) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fieldExtractor = createFieldExtractor(req, options);
  var validityFilter = createValidityFilter(req, options);
  var locationsFilter = createLocationFilter(options);
  return _(req._validationContexts).flatMap(fieldExtractor).filter(validityFilter).map(function (field) {
    return field.instance;
  }).filter(locationsFilter).reduce(function (state, field) {
    return _.set(state, field.path, field.value);
  }, {}).valueOf();
};

function createFieldExtractor(req, _ref) {
  var includeOptionals = _ref.includeOptionals;
  return function (context) {
    return [].concat(selectFields(req, context, {
      filterOptionals: includeOptionals !== true,
      // By the time we get here, all sanitizers did run, so we don't want double sanitization.
      sanitize: false
    })).map(function (instance) {
      return {
        instance: instance,
        context: context
      };
    });
  };
}

function createValidityFilter(req, _ref2) {
  var onlyValidData = _ref2.onlyValidData;
  onlyValidData = onlyValidData === undefined ? true : onlyValidData;
  return !onlyValidData ? function () {
    return true;
  } : function (field) {
    var hasError = req._validationErrors.some(function (error) {
      return error.param === field.instance.path && error.location === field.instance.location;
    });

    var isFailedOneOfGroup = (req._validationOneOfFailures || []).includes(field.context);
    return !(hasError || isFailedOneOfGroup);
  };
}

function createLocationFilter(_ref3) {
  var locations = _ref3.locations;
  var allLocations = !Array.isArray(locations) || locations.length === 0;
  return allLocations ? function () {
    return true;
  } : function (field) {
    return locations.includes(field.location);
  };
}