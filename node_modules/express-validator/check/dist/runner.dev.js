"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var toString = require('../utils/to-string');

var selectFields = require('../utils/select-fields');

module.exports = function (req, context) {
  var validationErrors = [];
  var promises = selectFields(req, context).map(function (field) {
    var location = field.location,
        path = field.path,
        value = field.value;
    return context.validators.reduce(function (promise, validatorCfg) {
      return promise.then(function () {
        var result = validatorCfg.custom ? validatorCfg.validator(value, {
          req: req,
          location: location,
          path: path
        }) : validatorCfg.validator.apply(validatorCfg, [toString(value)].concat(_toConsumableArray(validatorCfg.options)));
        return getActualResult(result).then(function (result) {
          if (!validatorCfg.negated && !result || validatorCfg.negated && result) {
            return Promise.reject();
          }
        });
      })["catch"](function (err) {
        validationErrors.push({
          location: location,
          param: path,
          value: field.originalValue,
          msg: getDynamicMessage([validatorCfg.message, err && err.message, err, context.message, 'Invalid value'], field, req)
        });
      });
    }, Promise.resolve());
  });
  return Promise.all(promises).then(function () {
    return validationErrors;
  });
};

function getActualResult(result) {
  var promiseLike = result && !!result.then;
  return Promise.resolve(result).then(function (result) {
    return result === undefined && promiseLike ? true : result;
  });
}

function getDynamicMessage(messageSources, field, req) {
  var message = messageSources.find(function (message) {
    return !!message;
  });

  if (typeof message !== 'function') {
    return message;
  }

  return message(field.originalValue, {
    req: req,
    location: field.location,
    path: field.path
  });
}