"use strict";

var validator = require('validator');

var runner = require('./runner');

var _require = require('../utils/filters'),
    isSanitizer = _require.isSanitizer,
    isValidator = _require.isValidator;

module.exports = function (fields, locations, message) {
  var optional;
  var validators = [];
  var sanitizers = [];
  fields = Array.isArray(fields) ? fields : [fields];

  var middleware = function middleware(req, res, next) {
    return runner(req, middleware._context).then(function (errors) {
      req._validationContexts = (req._validationContexts || []).concat(middleware._context);
      req._validationErrors = (req._validationErrors || []).concat(errors);
      next();
    }, next);
  };

  Object.keys(validator).filter(isValidator).forEach(function (methodName) {
    var validationFn = validator[methodName];

    middleware[methodName] = function () {
      for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
        options[_key] = arguments[_key];
      }

      validators.push({
        negated: middleware._context.negateNext,
        validator: validationFn,
        options: options
      });
      middleware._context.negateNext = false;
      return middleware;
    };
  });
  Object.keys(validator).filter(isSanitizer).forEach(function (methodName) {
    var sanitizerFn = validator[methodName];

    middleware[methodName] = function () {
      for (var _len2 = arguments.length, options = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        options[_key2] = arguments[_key2];
      }

      sanitizers.push({
        sanitizer: sanitizerFn,
        options: options
      });
      return middleware;
    };
  });

  middleware.optional = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    optional = options;
    return middleware;
  };

  middleware.custom = function (validator) {
    validators.push({
      validator: validator,
      custom: true,
      negated: middleware._context.negateNext,
      options: []
    });
    middleware._context.negateNext = false;
    return middleware;
  };

  middleware.customSanitizer = function (sanitizer) {
    sanitizers.push({
      sanitizer: sanitizer,
      custom: true,
      options: []
    });
    return middleware;
  };

  middleware.exists = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var validator = options.checkFalsy ? existsValidatorCheckFalsy : options.checkNull ? existsValidatorCheckNull : existsValidator;
    return middleware.custom(validator);
  };

  middleware.isArray = function () {
    return middleware.custom(function (value) {
      return Array.isArray(value);
    });
  };

  middleware.isString = function () {
    return middleware.custom(function (value) {
      return typeof value === 'string';
    });
  };

  middleware.withMessage = function (message) {
    var lastValidator = validators[validators.length - 1];

    if (lastValidator) {
      lastValidator.message = message;
    }

    return middleware;
  };

  middleware.not = function () {
    middleware._context.negateNext = true;
    return middleware;
  };

  middleware._context = {
    get optional() {
      return optional;
    },

    negateNext: false,
    message: message,
    fields: fields,
    locations: locations,
    sanitizers: sanitizers,
    validators: validators
  };
  return middleware;
};

function existsValidator(value) {
  return value !== undefined;
}

function existsValidatorCheckNull(value) {
  return value != null;
}

function existsValidatorCheckFalsy(value) {
  return !!value;
}