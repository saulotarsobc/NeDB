"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var _ = require('lodash');

var selectFields = require('../utils/select-fields');

var utils = require('./utils');

module.exports = function (contexts, req) {
  _(contexts).filter(function (context) {
    return !context.ran;
  }).flatMap(function (context) {
    return _(selectFields(req, context)).map(function (field) {
      return {
        field: field,
        context: context
      };
    }).groupBy(function (pair) {
      return pair.field.path;
    }).map(function (pairs) {
      return pairs[0];
    }).value();
  }).forEach(function (pairs) {
    var field = pairs.field,
        context = pairs.context;
    context.validators.map(function (validatorCfg) {
      var result = validatorCfg.validator.apply(validatorCfg, [validatorCfg.custom ? field.value : utils.toString(field.value)].concat(_toConsumableArray(validatorCfg.options)));
      var errorObj = {
        location: field.location,
        value: field.value,
        param: utils.formatParamOutput(field.path),
        msg: utils.replaceArgs(validatorCfg.message || context.message || 'Invalid value', [field.value].concat(_toConsumableArray(validatorCfg.options)))
      };

      if (result && result.then) {
        req._asyncValidationErrors.push(result.then(function () {
          validatorCfg.negated && req._validationErrors.push(errorObj);
        }, function () {
          !validatorCfg.negated && req._validationErrors.push(errorObj);
        }));
      } else if (!validatorCfg.negated && !result || validatorCfg.negated && result) {
        req._validationErrors.push(errorObj);
      }
    });
    context.ran = true;
  });
};